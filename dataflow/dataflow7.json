{
	"name": "dataflow7",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dsproduct",
						"type": "DatasetReference"
					},
					"name": "csvsrc"
				},
				{
					"dataset": {
						"referenceName": "assql",
						"type": "DatasetReference"
					},
					"name": "sqlsrc"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "assql",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "dscsv",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "TypeCast"
				},
				{
					"name": "LookupSno"
				},
				{
					"name": "condsplit"
				},
				{
					"name": "renamesqlcols"
				},
				{
					"name": "renamecsvcols"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "Select1"
				},
				{
					"name": "Select2"
				}
			],
			"script": "source(output(\n\t\tSno as string,\n\t\tRegion as string,\n\t\tCountry as string,\n\t\t{Item Type} as string,\n\t\t{Sales Channel} as string,\n\t\t{Order Priority} as string,\n\t\t{Order Date} as string,\n\t\t{Order ID} as string,\n\t\t{Ship Date} as string,\n\t\t{Units Sold} as string,\n\t\t{Unit Price} as string,\n\t\t{Unit Cost} as string,\n\t\t{Total Revenue} as string,\n\t\t{Total Cost} as string,\n\t\t{Total Profit} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> csvsrc\nsource(output(\n\t\tsno as integer,\n\t\tRegion as string,\n\t\tCountry as string,\n\t\t{Item Type} as string,\n\t\t{Sales Channel} as string,\n\t\t{Order Priority} as string,\n\t\t{Order Date} as timestamp,\n\t\t{Order ID} as string,\n\t\t{Ship Date} as timestamp,\n\t\t{Units Sold} as double,\n\t\t{Unit Price} as double,\n\t\t{Unit Cost} as double,\n\t\t{Total Revenue} as double,\n\t\t{Total Cost} as double,\n\t\t{Total Profit} as double,\n\t\tiscurrent as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> sqlsrc\ncsvsrc derive(Sno = toInteger(Sno),\n\t\teach(match(startsWith(name,'Total')), $$ = toDouble($$)),\n\t\teach(match(startsWith(name,'Unit')), $$ = toDouble($$)),\n\t\teach(match(endsWith(name,'Date')), $$ = toDate($$))) ~> TypeCast\nrenamecsvcols, renamesqlcols lookup(csvSno == sqlsno,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSno\nLookupSno split(sqlsno!=csvSno,\n\tdisjoint: false) ~> condsplit@(INSERT, UPDATE)\nsqlsrc select(mapColumn(\n\t\tsqlsno = sno,\n\t\tsqlRegion = Region,\n\t\tsqlCountry = Country,\n\t\t{sqlItem Type} = {Item Type},\n\t\t{sqlSales Channel} = {Sales Channel},\n\t\t{sqlOrder Priority} = {Order Priority},\n\t\t{sqlOrder Date} = {Order Date},\n\t\t{sqlOrder ID} = {Order ID},\n\t\t{sqlShip Date} = {Ship Date},\n\t\t{sqlUnits Sold} = {Units Sold},\n\t\t{sqlUnit Price} = {Unit Price},\n\t\t{sqlUnit Cost} = {Unit Cost},\n\t\t{sqlTotal Revenue} = {Total Revenue},\n\t\t{sqlTotal Cost} = {Total Cost},\n\t\t{sqlTotal Profit} = {Total Profit},\n\t\tiscurrent\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> renamesqlcols\nTypeCast select(mapColumn(\n\t\tcsvSno = Sno,\n\t\tcsvRegion = Region,\n\t\tcsvCountry = Country,\n\t\t{csvItem Type} = {Item Type},\n\t\t{csvSales Channel} = {Sales Channel},\n\t\t{csvOrder Priority} = {Order Priority},\n\t\t{csvOrder Date} = {Order Date},\n\t\t{csvOrder ID} = {Order ID},\n\t\t{csvShip Date} = {Ship Date},\n\t\t{csvUnits Sold} = {Units Sold},\n\t\t{csvUnit Price} = {Unit Price},\n\t\t{csvUnit Cost} = {Unit Cost},\n\t\t{csvTotal Revenue} = {Total Revenue},\n\t\t{csvTotal Cost} = {Total Cost},\n\t\t{csvTotal Profit} = {Total Profit}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> renamecsvcols\nSelect1 derive(iscurrent = 1) ~> DerivedColumn1\ncondsplit@INSERT select(mapColumn(\n\t\tcsvSno,\n\t\tcsvRegion,\n\t\tcsvCountry,\n\t\t{csvItem Type},\n\t\t{csvSales Channel},\n\t\t{csvOrder Priority},\n\t\t{csvOrder Date},\n\t\t{csvOrder ID},\n\t\t{csvShip Date},\n\t\t{csvUnits Sold},\n\t\t{csvUnit Price},\n\t\t{csvUnit Cost},\n\t\t{csvTotal Revenue},\n\t\t{csvTotal Cost},\n\t\t{csvTotal Profit}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\ncondsplit@UPDATE select(mapColumn(\n\t\tcsvSno,\n\t\tcsvRegion,\n\t\t{csvItem Type},\n\t\t{csvSales Channel},\n\t\t{csvOrder Priority},\n\t\t{csvOrder Date},\n\t\t{csvOrder ID},\n\t\t{csvShip Date},\n\t\t{csvUnits Sold},\n\t\t{csvUnit Price},\n\t\t{csvUnit Cost},\n\t\t{csvTotal Revenue},\n\t\t{csvTotal Cost},\n\t\t{csvTotal Profit}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDerivedColumn1 sink(input(\n\t\tsno as integer,\n\t\tRegion as string,\n\t\tCountry as string,\n\t\t{Item Type} as string,\n\t\t{Sales Channel} as string,\n\t\t{Order Priority} as string,\n\t\t{Order Date} as timestamp,\n\t\t{Order ID} as string,\n\t\t{Ship Date} as timestamp,\n\t\t{Units Sold} as double,\n\t\t{Unit Price} as double,\n\t\t{Unit Cost} as double,\n\t\t{Total Revenue} as double,\n\t\t{Total Cost} as double,\n\t\t{Total Profit} as double,\n\t\tiscurrent as integer,\n\t\tStartDate as date,\n\t\tEndDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tsno = csvSno,\n\t\tRegion = csvRegion,\n\t\tCountry = csvCountry,\n\t\t{Item Type} = {csvItem Type},\n\t\t{Sales Channel} = {csvSales Channel},\n\t\t{Order Priority} = {csvOrder Priority},\n\t\t{Order Date} = {csvOrder Date},\n\t\t{Order ID} = {csvOrder ID},\n\t\t{Ship Date} = {csvShip Date},\n\t\t{Units Sold} = {csvUnits Sold},\n\t\t{Unit Price} = {csvUnit Price},\n\t\t{Unit Cost} = {csvUnit Cost},\n\t\t{Total Revenue} = {csvTotal Revenue},\n\t\t{Total Cost} = {csvTotal Cost},\n\t\t{Total Profit} = {csvTotal Profit},\n\t\tiscurrent\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1\nSelect2 sink(input(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink2"
		}
	}
}